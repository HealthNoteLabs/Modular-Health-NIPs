## NIP-101h - Health Profile Framework

**Status:** Draft  
**Author:** TheWildHustle

## Abstract

This NIP defines a framework for storing and sharing health and fitness profile data on Nostr. It establishes a set of standardized event kinds for individual health metrics, allowing applications to selectively access specific health information while preserving user control and privacy.

In this framework exists
- NIP-101h.1 Weight using kind 1351 
- NIP-101h.2 Height using kind 1352 
- NIP-101h.3 Age using kind 1353 
- NIP-101h.4 Gender using kind 1354 
- NIP-101h.5 Fitness Level using kind 1355 
- NIP-101h.6 Workout Intensity using kind 1356
- NIP-101h.7 Caloric Data using kinds 1357 (expended) and 2357 (consumed)
- NIP-101h.8 Activity Duration using kind 1358
- NIP-101h.9 Step Count using kind 1359
- NIP-101h.10 Elevation using kind 1360


## Motivation

I want to build and support an ecosystem of health and fitness related nostr clients that have the ability to share and utilize a bunch of specific interoperable health metrics. 

- **Selective access** - Applications can access only the data they need
- **User control** - Users can choose which metrics to share
- **Interoperability** - Different health applications can share data
- **Privacy** - Sensitive health information can be managed independently

## Specification

### Kind Number Range

Health profile metrics use the kind number range 1351-1399 for primary metrics, with secondary kinds in the 2351-2399 range for related pairs (like calorie expenditure/intake):

| Kind      | Metric                             |
| --------- | ---------------------------------- |
| 1351      | Weight                             |
| 1352      | Height                             |
| 1353      | Age                                |
| 1354      | Gender                             |
| 1355      | Fitness Level                      |
| 1356      | Workout Intensity                  |
| 1357      | Calories Expended                  |
| 2357      | Calories Consumed                  |
| 1358      | Activity Duration                  |
| 1359      | Step Count                         |
| 1360      | Elevation                          |
| 1361-1399 | Reserved for future health metrics |
| 2358-2399 | Reserved for paired health metrics |

### Common Structure

All health metric events SHOULD follow these guidelines:

- The content field contains the primary value of the metric
- Required tags:
  - `['t', 'health']` - For categorizing as health data
  - `['t', metric-specific-tag]` - For identifying the specific metric
  - `['unit', unit-of-measurement]` - When applicable
- Optional tags:
  - `['converted_value', value, unit]` - For providing alternative unit measurements
  - `['timestamp', ISO8601-date]` - When the metric was measured
  - `['source', application-name]` - The source of the measurement

### Unit Handling

Health metrics often have multiple ways to be measured. To ensure interoperability:

- Where multiple units are possible, one standard unit SHOULD be chosen as canonical
- When using non-standard units, a `converted_value` tag SHOULD be included with the canonical unit
- Both the original and converted values should be provided for maximum compatibility

### Client Implementation Guidelines

Clients implementing this NIP SHOULD:

- Allow users to explicitly choose which metrics to publish
- **Default to encrypting event content using NIP-44 for all health metrics, providing a clear option for users to publish unencrypted if they choose.**
- Support reading health metrics from other users when appropriate permissions exist
- Support updating metrics with new values over time
- Preserve tags they don't understand for future compatibility
- Support at least the canonical unit for each metric

### Extensions

New health metrics can be proposed as extensions to this NIP using the format:

- NIP-101h.X where X is the metric number

Each extension MUST specify:
- A unique kind number in the range 1351-1399 (or 2351-2399 for paired metrics)
- The content format and meaning
- Required and optional tags
- Examples of valid events

## Privacy Considerations

Health data is sensitive personal information. Clients implementing this NIP SHOULD:

- Make it clear to users when health data is being published
- **Strongly consider defaulting to NIP-44 encryption for the `content` of all health metric events. An option to publish unencrypted data may be provided but should require explicit user consent per event or per metric type.**
- Consider incorporating NIP-44 encryption for sensitive metrics
- Allow users to selectively share metrics with specific individuals
- Provide easy ways to delete previously published health data

## Data Export (e.g., for Blossom)

To facilitate interoperability and data portability, especially with personal data servers like Blossom, NIP-101h metric data can be exported in common formats like JSON and CSV.

### JSON Export
When exporting multiple NIP-101h events as JSON, the output SHOULD be an array of standard Nostr event objects, each conforming to its respective NIP-101h.X specification.

```json
[
  {
    "kind": 1351, // Weight
    "content": "70", // Encrypted if NIP-44 was used
    "tags": [
      ["unit", "kg"],
      ["t", "health"],
      ["t", "weight"],
      ["timestamp", "2025-05-01T10:00:00Z"]
      // other relevant tags, including NIP-44 tags if encrypted
    ],
    "created_at": 1672531200,
    "pubkey": "...",
    "id": "...",
    "sig": "..."
  },
  {
    "kind": 1352, // Height
    "content": "175", // Encrypted if NIP-44 was used
    "tags": [
      ["unit", "cm"],
      ["t", "health"],
      ["t", "height"],
      ["timestamp", "2025-05-01T10:00:00Z"]
      // other relevant tags
    ],
    "created_at": 1672531201,
    "pubkey": "...",
    "id": "...",
    "sig": "..."
  }
  // ... more events
]
```

If NIP-44 encryption was used for the original event, the `content` field in the JSON export SHOULD remain encrypted, and the relevant NIP-44 `["encryption_algo", "nip44"]` and `["p", <receiver_pubkey>]` tags (or other NIP-44 related tags) should be preserved.

### CSV Export
CSV export requires a flattened structure. A recommended approach is to have common columns and then metric-specific columns. Clients or export tools will need to decide on a consistent set of columns for a given export.

**Common Columns:** `id`, `kind`, `created_at`, `pubkey`, `metric_type`, `timestamp`, `unit`, `value`, `source`, `encrypted (true/false)`

**Example CSV Structure (conceptual):**

`id,kind,created_at,pubkey,metric_type,timestamp,unit,value,activity,period,goal,source,encrypted`
`event_id1,1351,1672531200,pubkey1,weight,2025-05-01T10:00:00Z,kg,70,,,RunstrApp,true`
`event_id2,1359,1672531205,pubkey1,step_count,2025-05-01T23:59:59Z,steps,10520,,daily,10000,DeviceA,true`

**Notes for CSV Export:**
-   The `value` column would store the primary content of the NIP-101h event.
-   `metric_type` could be a human-readable version of the metric (e.g., "weight", "step_count").
-   For encrypted content, the `value` field in the CSV might be an empty string, a placeholder like "[encrypted]", or the encrypted string itself, depending on the use case. The `encrypted` column explicitly states the encryption status.
-   Additional tags from the Nostr event can be added as extra columns (e.g., `activity`, `period`, `goal` as shown above).
-   The specific columns included in a CSV export can be tailored to the application or user's needs. Individual NIP-101h.X specifications may provide more tailored CSV column suggestions if particular tags are common for that metric.

---

# NIP-101h.1: Weight

## Description
This NIP defines the format for storing and sharing weight data on Nostr.

## Event Kind: 1351

## Content
The content field MUST contain the numeric weight value as a string.

## Required Tags
- ['unit', 'kg' or 'lb'] - Unit of measurement
- ['t', 'health'] - Categorization tag
- ['t', 'weight'] - Specific metric tag

## Optional Tags
- ['converted_value', value, unit] - Provides the weight in alternative units for interoperability
- ['timestamp', ISO8601 date] - When the weight was measured

## Examples
```json
{
  "kind": 1351,
  "content": "70",
  "tags": [
    ["unit", "kg"],
    ["t", "health"],
    ["t", "weight"]
  ]
}
```

```json
{
  "kind": 1351,
  "content": "154",
  "tags": [
    ["unit", "lb"],
    ["t", "health"],
    ["t", "weight"],
    ["converted_value", "69.85", "kg"]
  ]
}
```



## NIP-101h.2: Height

**Status:** Draft

### Description

This NIP defines the format for storing and sharing height data on Nostr.

**Event Kind:** 1352

### Content

The content field can use two formats:
- For metric height: A string containing the numeric height value in centimeters (cm)
- For imperial height: A JSON string with feet and inches properties

### Required Tags

- `['t', 'health']` - Categorization tag
- `['t', 'height']` - Specific metric tag
- `['unit', 'cm' or 'imperial']` - Unit of measurement

### Optional Tags

- `['converted_value', value, 'cm']` - Provides height in centimeters for interoperability when imperial is used
- `['timestamp', ISO8601-date]` - When the height was measured

### Examples

```jsx
// Example 1: Metric height
Apply to App.jsx

// Example 2: Imperial height with conversion
Apply to App.jsx
```

### Implementation Notes

- Centimeters (cm) is the canonical unit for height interoperability
- When using imperial units, a conversion to centimeters SHOULD be provided
- Height values SHOULD be positive integers
- For maximum compatibility, clients SHOULD support both formats

---

## NIP-101h.3: Age

**Status:** Draft

### Description

This NIP defines the format for storing and sharing age data on Nostr.

**Event Kind:** 1353

### Content

The content field MUST contain the numeric age value as a string.

### Required Tags

- `['unit', 'years']` - Unit of measurement
- `['t', 'health']` - Categorization tag
- `['t', 'age']` - Specific metric tag

### Optional Tags

- `['timestamp', ISO8601-date]` - When the age was recorded
- `['dob', ISO8601-date]` - Date of birth (if the user chooses to share it)

### Examples

```jsx
// Example 1: Basic age
Apply to App.jsx

// Example 2: Age with DOB
Apply to App.jsx
```

### Implementation Notes

- Age SHOULD be represented as a positive integer
- For privacy reasons, date of birth (dob) is optional
- Clients SHOULD consider updating age automatically if date of birth is known
- Age can be a sensitive metric and clients may want to consider encrypting this data

---

## NIP-101h.4: Gender

**Status:** Draft

### Description

This NIP defines the format for storing and sharing gender data on Nostr.

**Event Kind:** 1354

### Content

The content field contains a string representing the user's gender.

### Required Tags

- `['t', 'health']` - Categorization tag
- `['t', 'gender']` - Specific metric tag

### Optional Tags

- `['timestamp', ISO8601-date]` - When the gender was recorded

### Examples

```jsx
// Example 1: Basic gender
Apply to App.jsx

// Example 2: Gender with timestamp
Apply to App.jsx
```

### Implementation Notes

- Gender SHOULD be represented as a string
- Clients SHOULD consider encrypting this data
