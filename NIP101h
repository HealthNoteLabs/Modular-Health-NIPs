## NIP-101h - Health Profile Framework

**Status:** Draft  
**Author:** TheWildHustle

## Abstract

This NIP defines a framework for storing and sharing health and fitness profile data on Nostr. It establishes a set of standardized event kinds for individual health metrics, organized by category, allowing applications to selectively access specific health information while preserving user control and privacy.

In this framework exists
- NIP-101h.1 Weight using kind 1351 
- NIP-101h.2 Height using kind 1352 
- NIP-101h.3 Age using kind 1353 
- NIP-101h.4 Gender using kind 1354 
- NIP-101h.5 Fitness Level using kind 1355 
- NIP-101h.6 Workout Intensity using kind 1356
- NIP-101h.7 Caloric Data using kinds 1357 (expended) and 2357 (consumed)
- NIP-101h.8 Activity Duration using kind 1358
- NIP-101h.9 Step Count using kind 1359
- NIP-101h.10 Elevation using kind 1360
- NIP-101h.11 Splits using kind 1361
- NIP-101h.12 Pace using kind 1362
- NIP-101h.13 Distance using kind 1363

## Motivation

I want to build and support an ecosystem of health and fitness related nostr clients that have the ability to share and utilize a bunch of specific interoperable health metrics. 

- **Selective access** - Applications can access only the data they need
- **User control** - Users can choose which metrics to share
- **Interoperability** - Different health applications can share data
- **Privacy** - Sensitive health information can be managed independently

## Framework Structure: Categories and Subcategories

To ensure scalability, discoverability, and privacy, all health metrics are organized into top-level categories and, where appropriate, subcategories. Each metric kind is assigned within a category range, and all events must include a `category` tag. This structure supports filtering, permissions, and future extensibility.

### Example Top-Level Categories
- **Anthropometrics** (e.g., weight, height, BMI)
- **Activity & Fitness** (e.g., step count, distance, workout intensity)
- **Nutrition & Diet** (e.g., calories, macronutrients, water intake)
- **Sleep** (e.g., total sleep, REM, sleep quality)
- **Mental Health & Mindfulness** (e.g., mood, stress, meditation)
- **Medical & Biometrics** (e.g., blood pressure, heart rate, glucose)
- **Lifestyle & Environment** (e.g., alcohol, caffeine, screen time)

Each category is assigned a kind number range (e.g., 1351–1369 for Anthropometrics, 1370–1389 for Activity, etc.). See the table below for current assignments.

## Specification

### Kind Number Ranges by Category

| Kind Range   | Category                  |
| ------------ | ------------------------- |
| 1351–1369    | Anthropometrics           |
| 1370–1389    | Activity & Fitness        |
| 1390–1409    | Nutrition & Diet          |
| 1410–1429    | Sleep                     |
| 1430–1449    | Mental Health & Mindfulness |
| 1450–1469    | Medical & Biometrics      |
| 1470–1489    | Lifestyle & Environment   |
| 1490–1499    | Reserved for future use   |
| 2351–2399    | Paired/secondary metrics  |

### Common Event Structure

All health metric events MUST follow these guidelines:

- The `content` field contains the primary value of the metric (as a string; encrypted if NIP-44 is used)
- Required tags:
  - `['t', 'health']` - For categorizing as health data
  - `['t', metric-specific-tag]` - For identifying the specific metric
  - `['category', category-name]` - The top-level category (e.g., 'anthropometrics')
  - `['unit', unit-of-measurement]` - When applicable
- Optional tags:
  - `['subcategory', subcategory-name]` - For finer granularity
  - `['converted_value', value, unit]` - For providing alternative unit measurements
  - `['timestamp', ISO8601-date]` - When the metric was measured
  - `['source', application-name]` - The source of the measurement
  - `['encryption_algo', 'nip44']` and `['p', <receiver_pubkey>]` - If NIP-44 encryption is used
  - `['encrypted', 'true'/'false']` - Explicit encryption status (optional)
  - `['version', '1']` - For future versioning (optional)
  - `['accuracy', 'estimate' | 'accurate' | 'exact']` - Data accuracy, defaults to 'estimate'
  - `['status', 'active' | 'deleted' | 'invalid']` - Status of the note, defaults to 'active'

#### Canonical Event Example

```json
{
  "kind": 1351,
  "content": "70", // or encrypted string
  "tags": [
    ["t", "health"],
    ["t", "weight"],
    ["category", "anthropometrics"],
    ["unit", "kg"],
    ["timestamp", "2025-05-01T10:00:00Z"],
    ["source", "RunstrApp"],
    ["converted_value", "154", "lb"],
    ["encryption_algo", "nip44"],
    ["p", "receiver_pubkey"],
    ["accuracy", "estimate"],
    ["status", "active"]
  ],
  "created_at": 1672531200,
  "pubkey": "...",
  "id": "...",
  "sig": "..."
}
```

### Unit Handling

- Each metric MUST specify a canonical unit (e.g., kg for weight, cm for height).
- If alternate units are used, include both the original and canonical via `converted_value`.
- Use strings for all values in `content` for consistency and to support encryption.
- For complex values (e.g., imperial height), use a JSON string in `content`.

### Client Implementation Guidelines

Clients implementing this NIP SHOULD:

- Allow users to explicitly choose which metrics to publish
- **Default to encrypting event content using NIP-44 for all health metrics, providing a clear option for users to publish unencrypted if they choose.**
- Support reading health metrics from other users when appropriate permissions exist
- Support updating metrics with new values over time
- Preserve tags they don't understand for future compatibility
- Support at least the canonical unit for each metric
- Filter, group, and request metrics by category and subcategory

### Extensions

New health metrics can be proposed as extensions to this NIP using the format:

- NIP-101h.X where X is the metric number

Each extension MUST specify:
- A unique kind number in the appropriate category range (see above)
- The content format and meaning
- Required and optional tags (including `category`)
- Examples of valid events

## Privacy Considerations

Health data is sensitive personal information. Clients implementing this NIP SHOULD:

- Make it clear to users when health data is being published
- **Strongly consider defaulting to NIP-44 encryption for the `content` of all health metric events. An option to publish unencrypted data may be provided but should require explicit user consent per event or per metric type.**
- Consider incorporating NIP-44 encryption for sensitive metrics
- Allow users to selectively share metrics with specific individuals or by category
- Provide easy ways to delete previously published health data

## Data Export (e.g., for Blossom)

To facilitate interoperability and data portability, especially with personal data servers like Blossom, NIP-101h metric data can be exported in common formats like JSON and CSV.

### JSON Export
When exporting multiple NIP-101h events as JSON, the output SHOULD be an array of standard Nostr event objects, each conforming to its respective NIP-101h.X specification.

```json
[
  {
    "kind": 1351, // Weight
    "content": "70", // Encrypted if NIP-44 was used
    "tags": [
      ["unit", "kg"],
      ["t", "health"],
      ["t", "weight"],
      ["timestamp", "2025-05-01T10:00:00Z"],
      ["accuracy", "estimate"],
      ["status", "active"]
    ],
    "created_at": 1672531200,
    "pubkey": "...",
    "id": "...",
    "sig": "..."
  },
  {
    "kind": 1352, // Height
    "content": "175", // Encrypted if NIP-44 was used
    "tags": [
      ["unit", "cm"],
      ["t", "health"],
      ["t", "height"],
      ["timestamp", "2025-05-01T10:00:00Z"],
      ["accuracy", "estimate"],
      ["status", "active"]
    ],
    "created_at": 1672531201,
    "pubkey": "...",
    "id": "...",
    "sig": "..."
  }
  // ... more events
]
```

If NIP-44 encryption was used for the original event, the `content` field in the JSON export SHOULD remain encrypted, and the relevant NIP-44 `["encryption_algo", "nip44"]` and `["p", <receiver_pubkey>]` tags (or other NIP-44 related tags) should be preserved.

### CSV Export
CSV export requires a flattened structure. A recommended approach is to have common columns and then metric-specific columns. Clients or export tools will need to decide on a consistent set of columns for a given export.

**Common Columns:** `id`, `kind`, `created_at`, `pubkey`, `metric_type`, `timestamp`, `unit`, `value`, `source`, `encrypted (true/false)`, `accuracy`, `status`

**Example CSV Structure (conceptual):**

`id,kind,created_at,pubkey,metric_type,timestamp,unit,value,activity,period,goal,source,encrypted,accuracy,status`
`event_id1,1351,1672531200,pubkey1,weight,2025-05-01T10:00:00Z,kg,70,,,RunstrApp,true,estimate,active`
`event_id2,1359,1672531205,pubkey1,step_count,2025-05-01T23:59:59Z,steps,10520,,daily,10000,DeviceA,true,estimate,active`

**Notes for CSV Export:**
-   The `value` column would store the primary content of the NIP-101h event.
-   `metric_type` could be a human-readable version of the metric (e.g., "weight", "step_count").
-   For encrypted content, the `value` field in the CSV might be an empty string, a placeholder like "[encrypted]", or the encrypted string itself, depending on the use case. The `encrypted` column explicitly states the encryption status.
-   Additional tags from the Nostr event can be added as extra columns (e.g., `activity`, `period`, `goal` as shown above).
-   The specific columns included in a CSV export can be tailored to the application or user's needs. Individual NIP-101h.X specifications may provide more tailored CSV column suggestions if particular tags are common for that metric.

## Versioning Policy

All NIP-101h events MUST include a version tag: `['version', '1']`. This enables future upgrades and backward compatibility. If breaking changes are introduced, the version number will be incremented, and clients should handle events based on the version tag.

## Canonical Tag Registry

| Tag Name         | Required | Description                                                      |
|------------------|----------|------------------------------------------------------------------|
| t                | Yes      | Category and metric-specific tags (e.g., 'health', 'weight')     |
| category         | Yes      | Top-level category (e.g., 'anthropometrics')                     |
| subcategory      | No       | Subcategory for finer granularity (e.g., 'macronutrients')       |
| unit             | Yes      | Canonical unit of measurement (e.g., 'kg', 'bpm')                |
| converted_value  | No       | Alternate value and unit (e.g., ['converted_value', '154', 'lb'])|
| timestamp        | No       | ISO8601 date/time of measurement                                 |
| source           | No       | Originating app/device                                           |
| encryption_algo  | No       | Encryption algorithm used (e.g., 'nip44')                        |
| p                | No       | Receiver pubkey for encryption                                   |
| encrypted        | No       | Explicit encryption status ('true'/'false')                      |
| version          | Yes      | Protocol version (e.g., '1')                                     |
| consent          | No       | Privacy/consent scope ('public', 'private', 'shared-with:<pubkey>') |
| lang             | No       | Language code for i18n (e.g., 'en')                              |
| e                | No       | Event reference for linking/threading                            |
| dob              | No       | Date of birth (for age metric)                                   |
| accuracy         | No       | Data accuracy, defaults to 'estimate'                              |
| status           | No       | Status of the note, defaults to 'active'                              |

Clients MUST ignore unknown tags and SHOULD preserve them when relaying events.

## Privacy and Consent Tags

To support user privacy and explicit consent, events MAY include a `['consent', 'public'|'private'|'shared-with:<pubkey>']` tag. This tag indicates the intended audience for the event:
- `public`: Anyone may access the event.
- `private`: Only the user or explicitly authorized parties may access the event.
- `shared-with:<pubkey>`: Only the specified public key(s) may access the event.

Clients SHOULD respect the consent tag and provide clear UI for users to set consent per event or per metric type.

## Event Validation Schema

A JSON Schema for NIP-101h events is provided to ensure interoperability and reduce ambiguity. Clients and SDKs SHOULD validate events against this schema.

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NIP-101h Health Metric Event",
  "type": "object",
  "required": ["kind", "content", "tags", "created_at", "pubkey", "id", "sig"],
  "properties": {
    "kind": {"type": "integer"},
    "content": {"type": "string"},
    "tags": {
      "type": "array",
      "items": {
        "type": "array",
        "minItems": 2,
        "items": {"type": "string"}
      }
    },
    "created_at": {"type": "integer"},
    "pubkey": {"type": "string"},
    "id": {"type": "string"},
    "sig": {"type": "string"}
  }
}
```

## Example Events

### 1. Basic Weight Event (Public, Unencrypted)
```json
{
  "kind": 1351,
  "content": "70",
  "tags": [
    ["t", "health"],
    ["t", "weight"],
    ["category", "anthropometrics"],
    ["unit", "kg"],
    ["timestamp", "2025-05-01T10:00:00Z"],
    ["source", "RunstrApp"],
    ["version", "1"],
    ["consent", "public"],
    ["accuracy", "estimate"],
    ["status", "active"]
  ],
  "created_at": 1672531200,
  "pubkey": "...",
  "id": "...",
  "sig": "..."
}
```

### 2. Encrypted Step Count Event (Shared with Specific User)
```json
{
  "kind": 1359,
  "content": "<encrypted-string>",
  "tags": [
    ["t", "health"],
    ["t", "step_count"],
    ["category", "activity & fitness"],
    ["unit", "steps"],
    ["timestamp", "2025-05-01T23:59:59Z"],
    ["source", "DeviceA"],
    ["encryption_algo", "nip44"],
    ["p", "receiver_pubkey"],
    ["version", "1"],
    ["consent", "shared-with:npub1...xyz"],
    ["accuracy", "estimate"],
    ["status", "active"]
  ],
  "created_at": 1672531205,
  "pubkey": "...",
  "id": "...",
  "sig": "..."
}
```

### 3. Nutrition Event with Subcategory and Alternate Unit
```json
{
  "kind": 1391,
  "content": "2000",
  "tags": [
    ["t", "health"],
    ["t", "calories_consumed"],
    ["category", "nutrition & diet"],
    ["subcategory", "macronutrients"],
    ["unit", "kcal"],
    ["converted_value", "8374", "kJ"],
    ["timestamp", "2025-05-01T20:00:00Z"],
    ["source", "FoodTrackerApp"],
    ["version", "1"],
    ["consent", "private"],
    ["accuracy", "estimate"],
    ["status", "active"]
  ],
  "created_at": 1672531210,
  "pubkey": "...",
  "id": "...",
  "sig": "..."
}
```

### 4. Event with Unknown/Extension Tags (Forward Compatibility)
```json
{
  "kind": 1451,
  "content": "120/80",
  "tags": [
    ["t", "health"],
    ["t", "blood_pressure"],
    ["category", "medical & biometrics"],
    ["unit", "mmHg"],
    ["timestamp", "2025-05-01T08:00:00Z"],
    ["source", "BPMonitor"],
    ["version", "1"],
    ["consent", "public"],
    ["custom_tag", "custom_value"],
    ["accuracy", "estimate"],
    ["status", "active"]
  ],
  "created_at": 1672531220,
  "pubkey": "...",
  "id": "...",
  "sig": "..."
}
```

## Error Handling and Unknown Tags

Clients MUST ignore unknown tags and SHOULD preserve them when relaying or exporting events. This ensures forward compatibility and allows for future extensions without breaking existing implementations.

## Security Considerations

- **Replay Attacks:** Clients should check timestamps and event IDs to prevent replaying old or duplicate events.
- **Fake Data:** Applications should provide ways for users to verify the source of data (e.g., trusted pubkeys, app signatures).
- **Encryption:** Sensitive data SHOULD be encrypted using NIP-44. The `encryption_algo` and `p` tags must be present for encrypted events.
- **Consent Enforcement:** Apps and relays SHOULD respect the `consent` tag and not expose private/shared data to unauthorized parties.
- **Data Deletion:** Users should have the ability to delete or revoke previously published health data.

---

# NIP-101h.1: Weight

## Description
This NIP defines the format for storing and sharing weight data on Nostr.

## Event Kind: 1351

## Content
The content field MUST contain the numeric weight value as a string.

## Required Tags
- ['unit', 'kg' or 'lb'] - Unit of measurement
- ['t', 'health'] - Categorization tag
- ['t', 'weight'] - Specific metric tag

## Optional Tags
- ['converted_value', value, unit] - Provides the weight in alternative units for interoperability
- ['timestamp', ISO8601 date] - When the weight was measured
- ['accuracy', 'estimate' | 'accurate' | 'exact'] - Data accuracy, defaults to 'estimate'
- ['status', 'active' | 'deleted' | 'invalid'] - Status of the note, defaults to 'active'

## Examples
```json
{
  "kind": 1351,
  "content": "70",
  "tags": [
    ["unit", "kg"],
    ["t", "health"],
    ["t", "weight"],
    ["accuracy", "estimate"],
    ["status", "active"]
  ]
}
```

```json
{
  "kind": 1351,
  "content": "154",
  "tags": [
    ["unit", "lb"],
    ["t", "health"],
    ["t", "weight"],
    ["converted_value", "69.85", "kg"],
    ["accuracy", "estimate"],
    ["status", "active"]
  ]
}
```

## NIP-101h.2: Height

**Status:** Draft

### Description

This NIP defines the format for storing and sharing height data on Nostr.

**Event Kind:** 1352

### Content

The content field can use two formats:
- For metric height: A string containing the numeric height value in centimeters (cm)
- For imperial height: A JSON string with feet and inches properties

### Required Tags

- `['t', 'health']` - Categorization tag
- `['t', 'height']` - Specific metric tag
- `['unit', 'cm' or 'imperial']` - Unit of measurement

### Optional Tags

- `['converted_value', value, 'cm']` - Provides height in centimeters for interoperability when imperial is used
- `['timestamp', ISO8601-date]` - When the height was measured
- `['accuracy', 'estimate' | 'accurate' | 'exact']` - Data accuracy, defaults to 'estimate'
- `['status', 'active' | 'deleted' | 'invalid']` - Status of the note, defaults to 'active'

### Examples

```jsx
// Example 1: Metric height
Apply to App.jsx

// Example 2: Imperial height with conversion
Apply to App.jsx
```

### Implementation Notes

- Centimeters (cm) is the canonical unit for height interoperability
- When using imperial units, a conversion to centimeters SHOULD be provided
- Height values SHOULD be positive integers
- For maximum compatibility, clients SHOULD support both formats

---

## NIP-101h.3: Age

**Status:** Draft

### Description

This NIP defines the format for storing and sharing age data on Nostr.

**Event Kind:** 1353

### Content

The content field MUST contain the numeric age value as a string.

### Required Tags

- `['unit', 'years']` - Unit of measurement
- `['t', 'health']` - Categorization tag
- `['t', 'age']` - Specific metric tag

### Optional Tags

- `['timestamp', ISO8601-date]` - When the age was recorded
- `['dob', ISO8601-date]` - Date of birth (if the user chooses to share it)
- `['accuracy', 'estimate' | 'accurate' | 'exact']` - Data accuracy, defaults to 'estimate'
- `['status', 'active' | 'deleted' | 'invalid']` - Status of the note, defaults to 'active'

### Examples

```jsx
// Example 1: Basic age
Apply to App.jsx

// Example 2: Age with DOB
Apply to App.jsx
```

### Implementation Notes

- Age SHOULD be represented as a positive integer
- For privacy reasons, date of birth (dob) is optional
- Clients SHOULD consider updating age automatically if date of birth is known
- Age can be a sensitive metric and clients may want to consider encrypting this data

---

## NIP-101h.4: Gender

**Status:** Draft

### Description

This NIP defines the format for storing and sharing gender data on Nostr.

**Event Kind:** 1354

### Content

The content field contains a string representing the user's gender.

### Required Tags

- `['t', 'health']` - Categorization tag
- `['t', 'gender']` - Specific metric tag

### Optional Tags

- `['timestamp', ISO8601-date]` - When the gender was recorded

### Examples

```jsx
// Example 1: Basic gender
Apply to App.jsx

// Example 2: Gender with timestamp
Apply to App.jsx
```

### Implementation Notes

- Gender SHOULD be represented as a string
- Clients SHOULD consider encrypting this data
